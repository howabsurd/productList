import { body, ValidationChain } from "express-validator";

export const createProductValidator: ValidationChain[] = [
  body('categoryId')
    .notEmpty().withMessage('Category ID cannot be empty')
    .isString().withMessage('Category ID must be a string'),

  body('name')
    .notEmpty().withMessage('Name cannot be empty')
    .isString().withMessage('Name must be a string')
    .isLength({ min: 3 }).withMessage('Name must be at least 3 characters long'),

  body('companyId')
    .notEmpty().withMessage('Company ID cannot be empty')
    .isString().withMessage('Company ID must be a string'),

  body('costPrice')
    .notEmpty().withMessage('Cost Price cannot be empty')
    .isInt({ min: 0 }).withMessage('Cost Price must be a positive integer'),

  body('sellingPrice')
    .notEmpty().withMessage('Selling Price cannot be empty')
    .isInt({ min: 0 }).withMessage('Selling Price must be a positive integer'),

  body('images')
    .isObject().withMessage('Images must be an Object')
    .optional(), // Assuming images can be optional

  body('createdAt')
    .optional() // Assuming createdAt is generated by the database
    .isISO8601().toDate().withMessage('CreatedAt must be a valid date'),

  body('attributes')
    .isObject().withMessage('Attributes must be a valid JSON object')
    .optional(), // Assuming attributes can be optional

  body('typeofGoodId')
    .notEmpty().withMessage('Type of Good ID cannot be empty')
    .isString().withMessage('Type of Good ID must be a string')
];


export const updateProductValidator: ValidationChain[] = [

  body('categoryId')
    .notEmpty().withMessage('Category ID cannot be empty')
    .isString().withMessage('Category ID must be a string'),

  body('name')
    .notEmpty().withMessage('Name cannot be empty')
    .isString().withMessage('Name must be a string')
    .isLength({ min: 3 }).withMessage('Name must be at least 3 characters long'),

  body('companyId')
    .notEmpty().withMessage('Company ID cannot be empty')
    .isString().withMessage('Company ID must be a string'),

  body('costPrice')
    .notEmpty().withMessage('Cost Price cannot be empty')
    .isInt({ min: 0 }).withMessage('Cost Price must be a positive integer'),

  body('sellingPrice')
    .notEmpty().withMessage('Selling Price cannot be empty')
    .isInt({ min: 0 }).withMessage('Selling Price must be a positive integer'),

  body('images')
    .isObject().withMessage('Images must be an array')
    .optional(), // Assuming images can be optional

  body('createdAt')
    .optional() // Assuming createdAt is generated by the database
    .isISO8601().toDate().withMessage('CreatedAt must be a valid date'),

  body('attributes')
    .isObject().withMessage('Attributes must be a valid JSON object')
    .optional(), // Assuming attributes can be optional

  body('typeofGoodId')
    .notEmpty().withMessage('Type of Good ID cannot be empty')
    .isString().withMessage('Type of Good ID must be a string')
];
